package com.kirey.kjcore.data.entity;
// Generated 21-Oct-2016 11:22:09 by Hibernate Tools 4.3.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kirey.kjcore.data.annotations.CreationUser;
import com.kirey.kjcore.data.annotations.UpdateUser;
import com.kirey.wscm.data.entity.UserAccounts;

/**
 * KjcUserAccounts generated by hbm2java
 */
@Entity
@Table(name = "KJC_USER_ACCOUNTS", uniqueConstraints = @UniqueConstraint(columnNames = "USERNAME") )
public class KjcUserAccounts implements java.io.Serializable, UserDetails {
	private static final long serialVersionUID = 9024008808782790051L;
	
	private Integer id;
	private String username;
	private String password;
	private String email;
	private Long tokenTimestamp;
	private Long timeout;
	@JsonIgnore
	private String token;
	private String defaultLanguage;
	private boolean enabled;
	private Integer utInsert;
	private Date tsInsert;
	private Integer utUpdate;
	private Date tsUpdate;
	private Integer logCounter;
	private Long passwordTimestamp;
	private String mailHash;
	private String mailHashSecret;
	private Long mailHashTimestamp;
	private Date firstLogin;
	private Date lastLogin;
	private Long accountExpiryDate;
	private KjcCompanies kjcCompanies;
	private boolean isOnlineUser = true;
//	private UserAccounts userAccounts;
	private String firstName;
	private String lastName;
	private String securityNumber;
	@JsonIgnore
	private String firebaseToken;
	@JsonIgnore
	private String mobileToken;
	private Long mobileTokenTimestamp;
	private Date mobileFirstLogin;
	private Date mobileLastLogin;
	private Integer mobileLogCounter;

	@JsonIgnore
	private List<KjcApplicationRoles> kjcApplicationRoleses = new ArrayList<KjcApplicationRoles>(0);

	public KjcUserAccounts() {
	}

	public KjcUserAccounts(Integer id, String username, String password, String email, Date tsInsert, Date tsUpdate) {
		this.id = id;
		this.username = username;
		this.password = password;
		this.email = email;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
	}

	public KjcUserAccounts(Integer id, String username, String password, String email, Long tokenTimestamp,
			Long timeout, String token, String defaultLanguage, Integer utInsert, Date tsInsert, Integer utUpdate,
			Date tsUpdate, List<KjcErrorLogs> kjcErrorLogses,
			List<KjcApplicationRoles> kjcApplicationRoleses,String mobileToken, Long mobileTokenTimestamp) {
		this.id = id;
		this.username = username;
		this.password = password;
		this.email = email;
		this.tokenTimestamp = tokenTimestamp;
		this.timeout = timeout;
		this.token = token;
		this.defaultLanguage = defaultLanguage;
		this.utInsert = utInsert;
		this.tsInsert = tsInsert;
		this.utUpdate = utUpdate;
		this.tsUpdate = tsUpdate;
		this.kjcApplicationRoleses = kjcApplicationRoleses;
		this.mobileToken = mobileToken;
		this.mobileTokenTimestamp = mobileTokenTimestamp;
	}

	@Id
	@SequenceGenerator(name = "user_gen", sequenceName = "SEQ_KJC_USER_ACCOUNTS", allocationSize = 1, initialValue = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "USERNAME", unique = true, nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}
		
	@JsonIgnore
	@Column(name = "PASSWORD", nullable = false)
	public String getPassword() {
		return this.password;
	}

	@JsonProperty
	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "EMAIL", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "TOKEN_TIMESTAMP", scale = 0)
	public Long getTokenTimestamp() {
		return this.tokenTimestamp;
	}

	public void setTokenTimestamp(Long tokenTimestamp) {
		this.tokenTimestamp = tokenTimestamp;
	}

	@Column(name = "TIMEOUT", scale = 0)
	public Long getTimeout() {
		return this.timeout;
	}

	public void setTimeout(Long timeout) {
		this.timeout = timeout;
	}

	@Column(name = "TOKEN")
	public String getToken() {
		return this.token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	@Column(name = "DEFAULT_LANGUAGE", length = 10)
	public String getDefaultLanguage() {
		return this.defaultLanguage;
	}

	public void setDefaultLanguage(String defaultLanguage) {
		this.defaultLanguage = defaultLanguage;
	}

	@Column(name = "UT_INSERT", updatable=false, precision = 10, scale = 0)
	@CreationUser
	public Integer getUtInsert() {
		return this.utInsert;
	}

	public void setUtInsert(Integer utInsert) {
		this.utInsert = utInsert;
	}

	@Column(name = "TS_INSERT", nullable = false, updatable=false)
	@org.hibernate.annotations.CreationTimestamp
	public Date getTsInsert() {
		return this.tsInsert;
	}

	public void setTsInsert(Date tsInsert) {
		this.tsInsert = tsInsert;
	}

	@Column(name = "UT_UPDATE", precision = 10, scale = 0)
	@UpdateUser
	public Integer getUtUpdate() {
		return this.utUpdate;
	}

	public void setUtUpdate(Integer utUpdate) {
		this.utUpdate = utUpdate;
	}

	@org.hibernate.annotations.UpdateTimestamp
	@Column(name = "TS_UPDATE", nullable = false)
	public Date getTsUpdate() {
		return this.tsUpdate;
	}

	public void setTsUpdate(Date tsUpdate) {
		this.tsUpdate = tsUpdate;
	}

	@ManyToMany
	@JoinTable(name = "KJC_USER_ROLES", joinColumns = {
			@JoinColumn(name = "KJC_USER_ACCOUNT", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "KJC_APPLICATION_ROLE", nullable = false, updatable = false) })
	@LazyCollection(LazyCollectionOption.FALSE)
	@Fetch(FetchMode.SUBSELECT)
	public List<KjcApplicationRoles> getKjcApplicationRoleses() {
		return this.kjcApplicationRoleses;
	}

	public void setKjcApplicationRoleses(List<KjcApplicationRoles> kjcApplicationRoleses) {
		this.kjcApplicationRoleses = kjcApplicationRoleses;
	}

	@Override
	@Transient
	public List<KjcApplicationRoles> getAuthorities() {
		return this.kjcApplicationRoleses;
	}

	@Override
	@Transient
	public boolean isAccountNonExpired() {
		boolean notExpired = false;
		Long expiryDate = getAccountExpiryDate() == null ? null : getAccountExpiryDate();
		if (expiryDate == null || System.currentTimeMillis() < getAccountExpiryDate())
			notExpired = true;
		return notExpired;
	}

	@Override
	@Transient
	public boolean isAccountNonLocked() {
		return this.getKjcCompanies().isFlActive();
	}
  
	@Override
	@Transient
	public boolean isCredentialsNonExpired() {
		boolean notExpired = false;
			Long passwordTimeout = this.getKjcCompanies().getPasswordTimeout();
			if ((System.currentTimeMillis() < getPasswordTimestamp() + passwordTimeout))
				notExpired = true;
			return notExpired;
	}

	
	@Override
	@Column(name = "FL_ENABLE", nullable = false)
	public boolean isEnabled() {
		return enabled;
	}

	@Column(name = "LOG_COUNTER", nullable = true)
	public Integer getLogCounter() {
		return logCounter;
	}

	public void setLogCounter(Integer logCounter) {
		this.logCounter = logCounter;
	}

	
	@Column(name = "PASSWORD_TIMESTAMP", nullable = false)
	public Long getPasswordTimestamp() {
		return passwordTimestamp;
	}

	public void setPasswordTimestamp(Long passwordTimestamp) {
		this.passwordTimestamp = passwordTimestamp;
	}

	
	@Column(name = "MAIL_HASH", nullable = true)
	public String getMailHash() {
		return mailHash;
	}

	
	public void setMailHash(String mailHash) {
		this.mailHash = mailHash;
	}		

	@Column(name = "MAIL_HASH_SECRET", nullable = true)
	public String getMailHashSecret() {
		return mailHashSecret;
	}

	public void setMailHashSecret(String mailHashSecret) {
		this.mailHashSecret = mailHashSecret;
	}

	@Column(name = "MAIL_HASH_TIMESTAMP", nullable = true)
	public Long getMailHashTimestamp() {
		return mailHashTimestamp;
	}

	public void setMailHashTimestamp(Long mailHashTimestamp) {
		this.mailHashTimestamp = mailHashTimestamp;
	}

	@Column(name = "FIRST_LOGIN", nullable = true)
	public Date getFirstLogin() {
		return firstLogin;
	}
	

	public void setFirstLogin(Date firstLogin) {
		this.firstLogin = firstLogin;
	}

	
	@Column(name = "LAST_LOGIN", nullable = true)
	public Date getLastLogin() {
		return lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	
	@Column(name = "ACCOUNT_EXPIRY_DATE", nullable = true)
	public Long getAccountExpiryDate() {
		return accountExpiryDate;
	}

	public void setAccountExpiryDate(Long accountExpiryDate) {
		this.accountExpiryDate = accountExpiryDate;
	}

	@ManyToOne
	@JoinColumn(name = "KJC_COMPANY", nullable = false)
	public KjcCompanies getKjcCompanies() {
		return kjcCompanies;
	}

	public void setKjcCompanies(KjcCompanies kjcCompanies) {
		this.kjcCompanies = kjcCompanies;
	}

	@Transient
	public boolean isOnlineUser() {
		return isOnlineUser;
	}

	public void setOnlineUser(boolean isOnlineUser) {
		this.isOnlineUser = isOnlineUser;
	}

//	@OneToOne(mappedBy = "kjcUserAccounts")
//	public UserAccounts getUserAccounts() {
//		return userAccounts;
//	}
//
//	public void setUserAccounts(UserAccounts userAccounts) {
//		this.userAccounts = userAccounts;
//	}

	@Column(name = "FIRST_NAME", unique = false, nullable = false)
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LAST_NAME", unique = false, nullable = false)
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "SECURITY_NUMBER", unique = false, nullable = true)
	public String getSecurityNumber() {
		return securityNumber;
	}

	public void setSecurityNumber(String securityNumber) {
		this.securityNumber = securityNumber;
	}

	@Column(name = "FIREBASE_TOKEN", nullable = true, length = 200)
	public String getFirebaseToken() {
		return firebaseToken;
	}

	public void setFirebaseToken(String firebaseToken) {
		this.firebaseToken = firebaseToken;
	}

	@Column(name = "MOBILE_TOKEN")
	public String getMobileToken() {
		return mobileToken;
	}

	public void setMobileToken(String mobileToken) {
		this.mobileToken = mobileToken;
	}

	@Column(name = "MOBILE_TOKEN_TIMESTAMP", scale = 0)
	public Long getMobileTokenTimestamp() {
		return mobileTokenTimestamp;
	}

	public void setMobileTokenTimestamp(Long mobileTokenTimestamp) {
		this.mobileTokenTimestamp = mobileTokenTimestamp;
	}

	@Column(name = "MOBILE_FIRST_LOGIN", nullable = true)
	public Date getMobileFirstLogin() {
		return mobileFirstLogin;
	}

	public void setMobileFirstLogin(Date mobileFirstLogin) {
		this.mobileFirstLogin = mobileFirstLogin;
	}

	@Column(name = "MOBILE_LAST_LOGIN", nullable = true)
	public Date getMobileLastLogin() {
		return mobileLastLogin;
	}

	public void setMobileLastLogin(Date mobileLastLogin) {
		this.mobileLastLogin = mobileLastLogin;
	}

	@Column(name = "MOBILE_LOG_COUNTER", nullable = true)
	public Integer getMobileLogCounter() {
		return mobileLogCounter;
	}

	public void setMobileLogCounter(Integer mobileLogCounter) {
		this.mobileLogCounter = mobileLogCounter;
	}
	
	
	

}
